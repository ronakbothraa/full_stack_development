'use strict';

var bundleNRequire = require('bundle-n-require');
var chokidar = require('chokidar');
var commander = require('commander');
var posix = require('node:path/posix');
var generateThemeTypings = require('./generate-theme-typings.cjs');
var initCli = require('./utils/init-cli.cjs');
var resolveOutputPath = require('./resolve-output-path.cjs');

async function run() {
  await initCli.initCLI();
  commander.program.command("tokens <source>").option(
    "--out <path>",
    `output file e.g. ${posix.join(...resolveOutputPath.themeInterfaceDestination)}`
  ).option(
    "--strict-component-types",
    "Generate strict types for props variant and size"
  ).option("--no-format", "Disable auto formatting").option("--watch [path]", "Watch directory for changes and rebuild").option(
    "--strict-token-types",
    "Generate strict types for theme tokens (e.g. color, spacing)"
  ).addOption(
    new commander.Option(
      "--template <template>",
      "Choose the template to use for the generation"
    ).default("default").choices(["default", "augmentation"])
  ).action(async (themeFile, options) => {
    const {
      out,
      strictComponentTypes,
      format,
      strictTokenTypes,
      watch,
      template
    } = options;
    const read = async () => {
      const filePath = posix.resolve(themeFile);
      const { mod, dependencies } = await bundleNRequire.bundleNRequire(filePath);
      const theme = mod.default || mod.theme || mod;
      return { theme, dependencies };
    };
    let ctx = await read();
    const build = async () => {
      await generateThemeTypings.generateThemeTypings({
        theme: ctx.theme,
        out,
        strictComponentTypes,
        format,
        strictTokenTypes,
        template
      });
      if (watch) {
        console.log("\n", "\u231B\uFE0F Watching for changes...");
      }
    };
    if (watch) {
      const watchPath = typeof watch === "string" ? watch : ctx.dependencies;
      chokidar.watch(watchPath).on("ready", build).on("change", async (filePath) => {
        console.log("\u{1F4E6} File changed", filePath);
        ctx = await read();
        return build();
      });
    } else {
      await build();
    }
  });
  commander.program.on("--help", () => {
    console.info(`Example call:
    $ chakra-cli tokens theme.ts
  `);
  });
  commander.program.parse();
}

exports.run = run;
