import { extractColorSchemeTypes } from './extract-color-schemes.mjs';
import { extractComponentTypes, printComponentTypes } from './extract-component-types.mjs';
import { extractPropertyKeys } from './extract-property-keys.mjs';
import { extractPropertyPaths, printUnionMap } from './extract-property-paths.mjs';
import { extractSemanticTokenKeys } from './extract-semantic-token-keys.mjs';
import { formatWithPrettier } from './utils/format-with-prettier.mjs';
import { isObject } from './utils/is-object.mjs';

function applyThemeTypingTemplate(typingContent, template) {
  switch (template) {
    case "augmentation":
      return `// regenerate by running
// npx @chakra-ui/cli tokens path/to/your/theme.(js|ts) --template augmentation --out path/to/this/file 
import { BaseThemeTypings } from "@chakra-ui/styled-system";
declare module "@chakra-ui/styled-system" {
  export interface CustomThemeTypings extends BaseThemeTypings {
    ${typingContent}
  }
}
`;
    case "default":
    default:
      return `// regenerate by running
// npx @chakra-ui/cli tokens path/to/your/theme.(js|ts)
import { BaseThemeTypings } from "./shared.types.js"
export interface ThemeTypings extends BaseThemeTypings {
  ${typingContent}
}
`;
  }
}
async function createThemeTypingsInterface(theme, {
  config,
  strictComponentTypes = false,
  format = true,
  strictTokenTypes = false,
  template = "default"
}) {
  const unions = config.reduce(
    (allUnions, { key, maxScanDepth, filter = () => true, flatMap = (value) => value }) => {
      const target = theme[key];
      allUnions[key] = [];
      if (isObject(target) || Array.isArray(target)) {
        allUnions[key] = extractPropertyPaths(target, maxScanDepth).filter(filter).flatMap(flatMap);
      }
      if (isObject(theme.semanticTokens)) {
        const semanticTokenKeys = extractSemanticTokenKeys(theme, key).filter(filter).flatMap(flatMap);
        allUnions[key].push(...semanticTokenKeys);
      }
      return allUnions;
    },
    {}
  );
  const textStyles = extractPropertyKeys(theme, "textStyles");
  const layerStyles = extractPropertyKeys(theme, "layerStyles");
  const colorSchemes = extractColorSchemeTypes(theme);
  const componentTypes = extractComponentTypes(theme);
  const typingContent = `${printUnionMap(
    { ...unions, textStyles, layerStyles, colorSchemes },
    (targetKey) => targetKey === "conditions" ? true : strictTokenTypes
  )}

  ${printComponentTypes(componentTypes, strictComponentTypes)}`;
  const themeTypings = applyThemeTypingTemplate(typingContent, template);
  return format ? formatWithPrettier(themeTypings) : themeTypings;
}

export { createThemeTypingsInterface };
