import { isObject } from './utils/is-object.mjs';

const hasSemanticTokens = (theme) => isObject(theme.semanticTokens);
function extractSemanticTokenKeys(theme, themePropertyName) {
  if (!hasSemanticTokens(theme)) {
    return [];
  }
  const themeProperty = theme["semanticTokens"][themePropertyName];
  if (!isObject(themeProperty)) {
    return [];
  }
  return Object.keys(flattenSemanticTokens(themeProperty));
}
function flattenSemanticTokens(target) {
  if (!isObject(target) && !Array.isArray(target)) {
    return target;
  }
  return Object.entries(target).reduce((result, [key, value]) => {
    if (isObject(value) && !("default" in value) || Array.isArray(value)) {
      Object.entries(flattenSemanticTokens(value)).forEach(
        ([childKey, childValue]) => {
          result[`${key}.${childKey}`] = childValue;
        }
      );
    } else {
      result[key] = value;
    }
    return result;
  }, {});
}

export { extractSemanticTokenKeys };
